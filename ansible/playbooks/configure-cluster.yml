# Purpose: This initializes the master node, generates the join command, stores it in SSM, and joins worker nodes.

---
- name: Initialize the cluster on master node
  hosts: k8s_master               # Run only on master node
  become: yes                     # Runs as root
  tasks:
    # Initialize the Kubernetes cluster on the master with kubeadm
    - name: Initialize Kubernetes cluster
      command: sudo kubeadm init --pod-network-cidr=10.244.0.0/16
      register: kubeadm_init      # Stores output for later use
      changed_when: kubeadm_init.rc == 0 # Marks as changed if successful

    # Set up kubeconfig for master node
    - name: Create .kube directory on master
      file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Copy kubeconfig to master's user home
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ ansible_user }}/.kube/config
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
        remote_src: yes

    # To manage the cluster remotely (e.g., from your control-node), 
    # copy the kubeconfig file from the master node to control-node
    - name: Fetch kubeconfig to control node
      fetch:
        src: /home/{{ ansible_user }}/.kube/config
        dest: ./kubeconfig
        flat: yes

    # Install Flannel network plugin, enabling pod-to-pod communication.
    - name: Install Flannel
      command: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      environment:
        KUBECONFIG: /home/{{ ansible_user }}/.kube/config # ensure kubectl uses the correct configuration.

    # Retrieve the join command for worker nodes
    - name: Get join command
      shell: kubeadm token create --print-join-command --ttl 0    # Generate the join command Non-expiring token
      register: join_command                              # Stores it(generated join command) in the `join_command` variable
      changed_when: false

    - name: Store join command in AWS SSM Parameter Store
      command: >
        aws ssm put-parameter --name "/url-shortener-k8s/join-command" --value "{{ join_command.stdout }}" --type SecureString --overwrite --region {{ aws_region }}
      delegate_to: localhost    # Run the task on your local machine (the control node running Ansible), not the remote k8s_master node

    # Saves the join command to a file on your local machine (/tmp/k8s_join_command.sh)
    # - name: Save join command to local file
    #   local_action:
    #     module: copy
    #     content: "{{ join_command.stdout }}"
    #     dest: /tmp/k8s_join_command.sh  # Saves it(generated join command) locally to /tmp/k8s_join_command.sh
    #   delegate_to: localhost            # Run the task on your local machine (the control node running Ansible), not the remote k8s_master node

# - name: Join workers to the cluster
#   hosts: k8s_workers             # Targets only worker nodes
#   become: yes                    # Runs as root
#   tasks:
#     - name: Fetch join command from SSM
#       shell: aws ssm get-parameter --name "/url-shortener-k8s/join-command" --with-decryption --query 'Parameter.Value' --output text --region {{ aws_region }}
#       register: join_command
#       delegate_to: localhost

#     - name: Execute join command
#       command: "{{ join_command.stdout }}"

    # If not saving join_command to ssm parameter in aws uncomment this section, and comment the 2 above
    # Join worker nodes using the join command from master
    # - name: Join worker to the cluster
    #   command: "{{ hostvars['master']['join_command'].stdout }}"
    #   when: hostvars['master']['join_command'] is defined